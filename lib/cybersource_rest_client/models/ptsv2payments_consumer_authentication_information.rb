=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Ptsv2paymentsConsumerAuthenticationInformation
    # Cardholder authentication verification value (CAVV).
    attr_accessor :cavv

    # Algorithm used to generate the CAVV for Visa Secure or the UCAF authentication data for Mastercard Identity Check. 
    attr_accessor :cavv_algorithm

    # Raw electronic commerce indicator (ECI).  For details, see `eci_raw` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
    attr_accessor :eci_raw

    # Payer authentication response status.  For details, see `pares_status` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
    attr_accessor :pares_status

    # Verification response enrollment status.  For details, see `veres_enrolled` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
    attr_accessor :veres_enrolled

    # Transaction identifier.  For details, see `xid` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
    attr_accessor :xid

    # Universal cardholder authentication field (UCAF) data.  For details, see `ucaf_authentication_data` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
    attr_accessor :ucaf_authentication_data

    attr_accessor :strong_authentication

    # The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID 
    attr_accessor :directory_server_transaction_id

    # This field contains 3DS version that was used for Secured Consumer Authentication (SCA). For example 3DS secure version 1.0.2 or 2.0.0 is used for Secured Consumer Authentication. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 113 , Field: MC AVV Verification—Program Protocol It will contain one of the following values: - `1` (3D Secure Version 1.0 (3DS 1.0)) - `2` (EMV 3-D Secure (3DS 2.0)) 
    attr_accessor :pa_specification_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cavv' => :'cavv',
        :'cavv_algorithm' => :'cavvAlgorithm',
        :'eci_raw' => :'eciRaw',
        :'pares_status' => :'paresStatus',
        :'veres_enrolled' => :'veresEnrolled',
        :'xid' => :'xid',
        :'ucaf_authentication_data' => :'ucafAuthenticationData',
        :'strong_authentication' => :'strongAuthentication',
        :'directory_server_transaction_id' => :'directoryServerTransactionId',
        :'pa_specification_version' => :'paSpecificationVersion'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cavv' => :'String',
        :'cavv_algorithm' => :'String',
        :'eci_raw' => :'String',
        :'pares_status' => :'String',
        :'veres_enrolled' => :'String',
        :'xid' => :'String',
        :'ucaf_authentication_data' => :'String',
        :'strong_authentication' => :'Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication',
        :'directory_server_transaction_id' => :'String',
        :'pa_specification_version' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cavv')
        self.cavv = attributes[:'cavv']
      end

      if attributes.has_key?(:'cavvAlgorithm')
        self.cavv_algorithm = attributes[:'cavvAlgorithm']
      end

      if attributes.has_key?(:'eciRaw')
        self.eci_raw = attributes[:'eciRaw']
      end

      if attributes.has_key?(:'paresStatus')
        self.pares_status = attributes[:'paresStatus']
      end

      if attributes.has_key?(:'veresEnrolled')
        self.veres_enrolled = attributes[:'veresEnrolled']
      end

      if attributes.has_key?(:'xid')
        self.xid = attributes[:'xid']
      end

      if attributes.has_key?(:'ucafAuthenticationData')
        self.ucaf_authentication_data = attributes[:'ucafAuthenticationData']
      end

      if attributes.has_key?(:'strongAuthentication')
        self.strong_authentication = attributes[:'strongAuthentication']
      end

      if attributes.has_key?(:'directoryServerTransactionId')
        self.directory_server_transaction_id = attributes[:'directoryServerTransactionId']
      end

      if attributes.has_key?(:'paSpecificationVersion')
        self.pa_specification_version = attributes[:'paSpecificationVersion']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@cavv.nil? && @cavv.to_s.length > 40
        invalid_properties.push('invalid value for "cavv", the character length must be smaller than or equal to 40.')
      end

      if !@cavv_algorithm.nil? && @cavv_algorithm.to_s.length > 1
        invalid_properties.push('invalid value for "cavv_algorithm", the character length must be smaller than or equal to 1.')
      end

      if !@eci_raw.nil? && @eci_raw.to_s.length > 2
        invalid_properties.push('invalid value for "eci_raw", the character length must be smaller than or equal to 2.')
      end

      if !@pares_status.nil? && @pares_status.to_s.length > 1
        invalid_properties.push('invalid value for "pares_status", the character length must be smaller than or equal to 1.')
      end

      if !@veres_enrolled.nil? && @veres_enrolled.to_s.length > 1
        invalid_properties.push('invalid value for "veres_enrolled", the character length must be smaller than or equal to 1.')
      end

      if !@xid.nil? && @xid.to_s.length > 40
        invalid_properties.push('invalid value for "xid", the character length must be smaller than or equal to 40.')
      end

      if !@ucaf_authentication_data.nil? && @ucaf_authentication_data.to_s.length > 32
        invalid_properties.push('invalid value for "ucaf_authentication_data", the character length must be smaller than or equal to 32.')
      end

      if !@directory_server_transaction_id.nil? && @directory_server_transaction_id.to_s.length > 36
        invalid_properties.push('invalid value for "directory_server_transaction_id", the character length must be smaller than or equal to 36.')
      end

      if !@pa_specification_version.nil? && @pa_specification_version.to_s.length > 1
        invalid_properties.push('invalid value for "pa_specification_version", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@cavv.nil? && @cavv.to_s.length > 40
      return false if !@cavv_algorithm.nil? && @cavv_algorithm.to_s.length > 1
      return false if !@eci_raw.nil? && @eci_raw.to_s.length > 2
      return false if !@pares_status.nil? && @pares_status.to_s.length > 1
      return false if !@veres_enrolled.nil? && @veres_enrolled.to_s.length > 1
      return false if !@xid.nil? && @xid.to_s.length > 40
      return false if !@ucaf_authentication_data.nil? && @ucaf_authentication_data.to_s.length > 32
      return false if !@directory_server_transaction_id.nil? && @directory_server_transaction_id.to_s.length > 36
      return false if !@pa_specification_version.nil? && @pa_specification_version.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cavv Value to be assigned
    def cavv=(cavv)
      if !cavv.nil? && cavv.to_s.length > 40
        fail ArgumentError, 'invalid value for "cavv", the character length must be smaller than or equal to 40.'
      end

      @cavv = cavv
    end

    # Custom attribute writer method with validation
    # @param [Object] cavv_algorithm Value to be assigned
    def cavv_algorithm=(cavv_algorithm)
      if !cavv_algorithm.nil? && cavv_algorithm.to_s.length > 1
        fail ArgumentError, 'invalid value for "cavv_algorithm", the character length must be smaller than or equal to 1.'
      end

      @cavv_algorithm = cavv_algorithm
    end

    # Custom attribute writer method with validation
    # @param [Object] eci_raw Value to be assigned
    def eci_raw=(eci_raw)
      if !eci_raw.nil? && eci_raw.to_s.length > 2
        fail ArgumentError, 'invalid value for "eci_raw", the character length must be smaller than or equal to 2.'
      end

      @eci_raw = eci_raw
    end

    # Custom attribute writer method with validation
    # @param [Object] pares_status Value to be assigned
    def pares_status=(pares_status)
      if !pares_status.nil? && pares_status.to_s.length > 1
        fail ArgumentError, 'invalid value for "pares_status", the character length must be smaller than or equal to 1.'
      end

      @pares_status = pares_status
    end

    # Custom attribute writer method with validation
    # @param [Object] veres_enrolled Value to be assigned
    def veres_enrolled=(veres_enrolled)
      if !veres_enrolled.nil? && veres_enrolled.to_s.length > 1
        fail ArgumentError, 'invalid value for "veres_enrolled", the character length must be smaller than or equal to 1.'
      end

      @veres_enrolled = veres_enrolled
    end

    # Custom attribute writer method with validation
    # @param [Object] xid Value to be assigned
    def xid=(xid)
      if !xid.nil? && xid.to_s.length > 40
        fail ArgumentError, 'invalid value for "xid", the character length must be smaller than or equal to 40.'
      end

      @xid = xid
    end

    # Custom attribute writer method with validation
    # @param [Object] ucaf_authentication_data Value to be assigned
    def ucaf_authentication_data=(ucaf_authentication_data)
      if !ucaf_authentication_data.nil? && ucaf_authentication_data.to_s.length > 32
        fail ArgumentError, 'invalid value for "ucaf_authentication_data", the character length must be smaller than or equal to 32.'
      end

      @ucaf_authentication_data = ucaf_authentication_data
    end

    # Custom attribute writer method with validation
    # @param [Object] directory_server_transaction_id Value to be assigned
    def directory_server_transaction_id=(directory_server_transaction_id)
      if !directory_server_transaction_id.nil? && directory_server_transaction_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "directory_server_transaction_id", the character length must be smaller than or equal to 36.'
      end

      @directory_server_transaction_id = directory_server_transaction_id
    end

    # Custom attribute writer method with validation
    # @param [Object] pa_specification_version Value to be assigned
    def pa_specification_version=(pa_specification_version)
      if !pa_specification_version.nil? && pa_specification_version.to_s.length > 1
        fail ArgumentError, 'invalid value for "pa_specification_version", the character length must be smaller than or equal to 1.'
      end

      @pa_specification_version = pa_specification_version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cavv == o.cavv &&
          cavv_algorithm == o.cavv_algorithm &&
          eci_raw == o.eci_raw &&
          pares_status == o.pares_status &&
          veres_enrolled == o.veres_enrolled &&
          xid == o.xid &&
          ucaf_authentication_data == o.ucaf_authentication_data &&
          strong_authentication == o.strong_authentication &&
          directory_server_transaction_id == o.directory_server_transaction_id &&
          pa_specification_version == o.pa_specification_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cavv, cavv_algorithm, eci_raw, pares_status, veres_enrolled, xid, ucaf_authentication_data, strong_authentication, directory_server_transaction_id, pa_specification_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
